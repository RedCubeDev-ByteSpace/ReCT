namespace ReCT.CodeAnalysis.Syntax
{
    public enum SyntaxKind
    {
        // Tokens
        BadToken,
        EndOfFileToken,
        WhitespaceToken,
        NumberToken,
        StringToken,
        PlusToken,
        MinusToken,
        StarToken,
        SlashToken,
        NotToken,
        AssignToken,
        TildeToken,
        HatToken,
        AmpersandToken,
        AmpersandAmpersandToken,
        PipeToken,
        PipePipeToken,
        EqualsToken,
        NotEqualsToken,
        LessToken,
        LessOrEqualsToken,
        GreaterToken,
        GreaterOrEqualsToken,
        OpenParenthesisToken,
        CloseParenthesisToken,
        OpenBraceToken,
        CloseBraceToken,
        TypeToken,
        CommaToken,
        IdentifierToken,
        EditVariableToken,
        SingleEditVariableToken,
        NamespaceToken,
        OpenBracketToken,
        CloseBracketToken,
        AccessToken,
        ShiftRight,
        ShiftLeft,

        // Keywords
        BreakKeyword,
        ContinueKeyword,
        ElseKeyword,
        FalseKeyword,
        ForKeyword,
        FunctionKeyword,
        IfKeyword,
        SetKeyword,
        ReturnKeyword,
        ToKeyword,
        TrueKeyword,
        VarKeyword,
        WhileKeyword,
        DoKeyword,
        AccessKeyword,
        TryKeyword,
        CatchKeyword,
        FromKeyword,
        ThreadKeyword,
        MakeKeyword,
        ArrayKeyword,
        ClassKeyword,
        EnumKeyword,
        ObjectKeyword,
        DllKeyword,
        PackageKeyword,
        NamespaceKeyword,
        TypeKeyword,
        UseKeyword,
        NullKeyword,

        // Nodes
        CompilationUnit,
        FunctionDeclaration,
        GlobalStatement,
        Parameter,
        TypeClause,
        ElseClause,

        // Statements
        BlockStatement,
        VariableDeclaration,
        IfStatement,
        WhileStatement,
        DoWhileStatement,
        ForStatement,
        BreakStatement,
        ContinueStatement,
        ReturnStatement,
        ExpressionStatement,
        ClassDeclaration,
        FromToStatement,
        TryCatchStatement,
        PackageStatement,
        NamespaceStatement,
        TypeStatement,
        UseStatement,

        // Expressions
        LiteralExpression,
        NameExpression,
        UnaryExpression,
        BinaryExpression,
        ParenthesizedExpression,
        AssignmentExpression,
        CallExpression,
        ObjectAccessExpression,
        ThreadCreateExpression,
        ArrayCreateExpression,
        ObjectCreateExpression,
        IncKeyword,
        EnumStatement,
        AliasKeyword,
        AliasStatement,
        PercentToken,
        QuestionMarkToken,
        ColonToken,
        TernaryExpression,
        ArrayLiteralExpression,
        ActionKeyword,
        ActionCreateExpression,
        AbstractKeyword,
        SerializableKeyword,
        VirtualKeyword,
        BaseKeyword,
        BaseStatement
    }
}